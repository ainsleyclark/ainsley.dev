// Package sdk provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package sdk

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
)

// Message and attributes from the contact form
type ContactFormRequest struct {
	// The message from the user.
	Honeypot *string `json:"honeypot,omitempty"`

	// The message from the user.
	Message string `json:"message"`
}

// The message sent back to the user upon successful submission
type ContactFormResponse = string

// HTTPResponse defines model for HTTPResponse.
type HTTPResponse struct {
	Data    *map[string]interface{} `json:"data,omitempty"`
	Error   *bool                   `json:"error,omitempty"`
	Message *string                 `json:"message,omitempty"`
	Status  *int                    `json:"status,omitempty"`
}

// SendContactFormJSONBody defines parameters for SendContactForm.
type SendContactFormJSONBody = ContactFormRequest

// SendContactFormJSONRequestBody defines body for SendContactForm for application/json ContentType.
type SendContactFormJSONRequestBody = SendContactFormJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /forms/contact)
	SendContactForm(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// SendContactForm converts echo context to params.
func (w *ServerInterfaceWrapper) SendContactForm(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SendContactForm(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/forms/contact", wrapper.SendContactForm)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RUTW/jNhD9KwTbo2I53Z50ajbdokG2m6BOgQJBDiNqZHGXIrmckbdCoP9eDC0ncuJ+",
	"odiTZZLz5s3Mm/eoTehj8OiZdPWoyXTYQ/68DJ7B8E8h9b/i5wGJ5bRBMslGtsHrSv+CRLBFBb5RwJxs",
	"PTCSalPoFXeozB5DtSH1utAxhYiJLeYEXfA4xnAC9q5D1c/QT1gDYVrpQvMYUVeaOFm/1VOh55f/D2Yq",
	"dMLPg03Y6Or+CfPh6WGoP6JhyXfUGIrB0z/kJvSsajCfFIcnDmqIwSsajEGidnCKhrq3RBJ+osif7+5u",
	"l9mOW9kAg/y+4oophbS4qUNwCP5F2/AP6KOT+9+EmUwLmLF53b2L26tT7IiBB1rksZ5xi0lPk3SW0AzJ",
	"8rgRde0ZX0R7jePFwJ38s9KyDqHBpAvtoReM388ubq/OrnF8zgg5SmdQ69sgsbPGch09WJeRnAs/gPXk",
	"cFw1uHsGXRyqOwRR5ZByDHOkqizpC2y3mFY2SGHHQ2Xsoy60swbnMcyobzc/qjdnlw4GQvV+vn6JvLXc",
	"DfXKhL6cWRgH6VO5oFTWLtRlD8SYyvdXl+8+bN4JDcbU0027wbSzBheYy9j8qJRmWXbHtc5z22GifSXn",
	"q/VqLcghoododaXf5KNCR+Auj6gUHVC56G8Mp0zgNhCTAuXxS5bOQskinCSqPxhBhC3K9ol4QeKvGl3p",
	"DfpmsVV6v4tI/DY042HG6HNuiNFZk2PLjyQEDq4lX98mbHWlvymfba2cPa08YWhZSK8XN2+BsE4IjIUC",
	"51Rr0TWkIKE6GIU8iUCkduBskymtdDaS/Z7mLn63Xv+nCsC5m1ZX939fy5EdTMVf+cG/bscBaZoeTvTk",
	"5lqdqY242LNfuVFK/X59/tWrO8XoQ2Al5hGSJWyyzSx8JidYOsz9w/Qg10k2IN++kHAKzWB4773HWwvR",
	"rmZ/zKu7OxdGfwYAAP//K0GVXzgHAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
