// Package sdk provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package sdk

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	AuthenticationScopes = "Authentication.Scopes"
)

// Message and attributes from the contact form.
type ContactFormRequest struct {
	// The message from the user.
	Honeypot string `json:"honeypot"`

	// The message from the user.
	Message string `json:"message"`
}

// HTTPError defines model for HTTPError.
type HTTPError struct {
	Code      string `json:"code"`
	Error     string `json:"error"`
	Message   string `json:"message"`
	Operation string `json:"operation"`
}

// HTTPResponse defines model for HTTPResponse.
type HTTPResponse struct {
	Data    interface{} `json:"data"`
	Message string      `json:"message"`
}

// SendContactFormJSONBody defines parameters for SendContactForm.
type SendContactFormJSONBody = ContactFormRequest

// SendContactFormJSONRequestBody defines body for SendContactForm for application/json ContentType.
type SendContactFormJSONRequestBody = SendContactFormJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /forms/contact/)
	SendContactForm(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// SendContactForm converts echo context to params.
func (w *ServerInterfaceWrapper) SendContactForm(ctx echo.Context) error {
	var err error

	ctx.Set(AuthenticationScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SendContactForm(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/forms/contact/", wrapper.SendContactForm)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xUYW/bNhD9KwS3j4qUrd/0aW6WYkbb1ajTYUAQDGfqZLGlSJZ3dGsU/u8DKTlSbHfF",
	"0H6KQh/fvXt8975I5XrvLFomWX+RpDrsIX/eOMug+IUL/Vv8GJE4nTZIKmjP2llZy9dIBFsUYBsBzEFv",
	"IiOJNrhecIdCDRiidaEvZSF9cB4Da8wdOmdx790F3LsORT9iP4JFwpBAeO9R1pI4aLuVh0KOld8Hcyhk",
	"wI9RB2xkff+IWUwsHx7vuM17VJxa/3F3t7oNwYXU/Ol0yjWZEn6G3pt0DVPhP/n8whR4hDm58I2Jp+rM",
	"oxDRwsagYCcgcoeWtQK+2DGxhUGqOc6LaFU6LV8jd675H1KNox1pT/hfk+4tkneW8Fy9BhjS34Xd/wUm",
	"porD1wZ/RxiyxYAZm/MXX6yW3xwi95uoH/ucEz8UklDFoHm/Tssy0F1MUo966mTADqHBhGehTyB/Xy1W",
	"y6uXuJ/4gNfp/0MC1rZ1g3Xy2uQpe9AmIxnjfgNtyeC+bHA3gc4OxR1CLwsZQ77D7KmuKvoE2y2GUruk",
	"+9MVWayWYu1RJf2yWBtQH9A2wrXiaTejFY5PNTZ+vv5dPLu6MRAJxavx59PmW81d3JTK9dWIpwyED9UM",
	"vNoYt6l6IMZQvVre3P65vk1MGUNPb9o1hp1WOMOc381FVdJTszmVY3j5HQYapv2lvC6vR+tb8FrW8lk+",
	"KqQH7vJTVslJVI1vUGVrukvht3LEJEBY/JTdJyhuek2p1eg99xiAHrZYzldi2chartE2s5iVgyWR+Llr",
	"9kcjoM29wXsz2qt6T4PHhrROXz8HbGUtf6qmOK/GLK8uBHl223lW5kVKrAMCYyHAGNFqNA0JCCiO+5JK",
	"PBCJHRjdZEqlzPs0bHOW8dfr6x82wZOouMD9zUtxJdZoWVBUConaaMx+MHsL0fAPZTLk/QUa7yx+9qhS",
	"BuGxZp4Xsr4/T4r7h8NDKgnJpbnixGXBNTHnsbi1Ox2c7dMUp2s2X4lk7ENxCrRm2Gq7/U8UGmrKM7SH",
	"w78BAAD//04jhjcqCAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
